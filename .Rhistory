data_Keys_Heroes
rm(tbl_draft)
rm(nodo_tmp)
library(shiny)
#library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(dashboardthemes)
library(shinyjs)
#Nodo
library(data.tree)
#Otros
tmp = load("data_partidas.RData")
View(tmp)
tmp = load("/data_partidas.RData")
tmp = load("\data_partidas.RData")
cant_por_Seleccionar = 40
cont_nodos <<- 0
niveles_gamemode = readRDS("nvGamemode.RDS")
niveles_maps = readRDS("nvMaps.RDS")
data_Keys_Heroes = readRDS("dataKeysHeroes.RDS")
data_Keys_Maps = readRDS("dataKeysMaps.RDS")
View(data_Keys_Maps)
library(shiny)
#library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(dashboardthemes)
library(shinyjs)
#Nodo
library(data.tree)
#Otros
################################################# UI #################################################
## Variables globales ##
cant_por_Seleccionar = 40
cont_nodos <<- 0
niveles_gamemode = readRDS("nvGamemode.RDS")
niveles_maps = readRDS("nvMaps.RDS")
data_Keys_Heroes = readRDS("dataKeysHeroes.RDS")
data_Keys_Maps = readRDS("dataKeysMaps.RDS")
## Descarga de los modelos a usar ##
LstGrndModel = NULL
for(i in 1:(length(niveles_maps))){
LstGrndModel = append(LstGrndModel, list(readRDS(paste0("GrndModel", i, ".RDS"))))}
######## FUNCTIONS ########
## Funciones de tablero ##
crear_tablero = function(tablero, gamemode = "8", mapid = "1001"){
#¿El gamemode es invalido?
if(!(gamemode %in% niveles_gamemode)){
stop("El gamemode ingresado no esta permitido")}
#¿El mapid es invalido?
if(!(mapid %in% niveles_maps)){
stop("El mapid ingresado no esta permitido")}
if(missing(tablero)){
#Retornar lista con [turno, baneos, heroes, gamemode, mapid]
return(list(1, c(), c(), gamemode, mapid))}
else{
return(tablero)}
}
realizar_movimiento = function(tablero, heroe){
#Falta ingresar tablero
if(missing(tablero)){
stop("Falta ingresar tablero")}
#¿El heroe es invalido?
if(missing(heroe) || !(heroe %in% data_Keys_Heroes$primaryname) || (heroe %in% tablero[[2]]) || (heroe %in% tablero[[3]])){
stop("El heroe es invalido")}
else{
#Si estamos en un turno de baneo:
if(tablero[[1]] == 1 || tablero[[1]] == 2 || tablero[[1]] == 8 || tablero[[1]] == 9){
#agrego heroe a la lista de baneos
tablero[[2]] = append(tablero[[2]], heroe)
#pasar al siguiente turno
tablero[[1]] = tablero[[1]]+1}
#Si los turnos de seleccion no han terminado
else if(tablero[[1]] < 15){
#Se agrega el heroe a la lista de heroes seleccionados
tablero[[3]] = append(tablero[[3]], heroe)
#pasar al siguiente turno
tablero[[1]] = tablero[[1]]+1}
else{
stop("Turno no valido, el juego posiblemente a terminado.")}
return(tablero)}
}
is_done = function(tablero){
if(missing(tablero)){
stop("Tablero no ingresado")}
else{
#Si el turno es igual a 15
if(tablero[[1]] == 15){
#Si hay 4 nombres en la lista de baneos
if(length(tablero[[2]]) == 4){
#Si hay 10 nombres en la lista de seleccionados
if(length(tablero[[3]]) == 10){
return(TRUE)}
else{
return(FALSE)}}
else{
return(FALSE)}}
else{
return(FALSE)}}
}
#Retorna un vector con el nombre de los heroes no utilizados
set_movimientos = function(tablero){
#Creacion de lista preliminar de de heroes disponibles a usar
lista_heroes_disponibles = data_Keys_Heroes$primaryname
#Quitar los heroes ya baneados
for (heroe_baneado in tablero[[2]]){
lista_heroes_disponibles = lista_heroes_disponibles[which(lista_heroes_disponibles != heroe_baneado)]}
#Quitar los heroes ya escogidos
for (heroe_seleccionado in tablero[[3]]){
lista_heroes_disponibles = lista_heroes_disponibles[which(lista_heroes_disponibles != heroe_seleccionado)]}
#Retornar la lista de heroes no utilizados
return(lista_heroes_disponibles)
}
## Funcion de nodo ##
crear_nodo = function(nombre_nodo, tablero_entrada){
if(is_done(tablero_entrada)){
tmp_root = Node$new(nombre_nodo, tablero=tablero_entrada, is_terminal=T, visitas=0, puntuacion=0, is_extended=T)}
else{
tmp_root = Node$new(nombre_nodo, tablero=tablero_entrada, is_terminal=F, visitas=0, puntuacion=0, is_extended=F)}
return(tmp_root)
}
## MCTS ##
search = function(actual_node, constante, booleano_politica = TRUE){
#Tiempo, en segundos, que se permite iterar
period = 20
#Guardar tiempo actual
actual_time = Sys.time()  ## starting data & time
#(Tiempo) o (numero de iteraciones) que puede realizar el simulador MCTS
while (difftime(Sys.time(), actual_time, units = "secs")[[1]] < period){
tmp_nodo = select(actual_node, constante, booleano_politica)
tmp_puntuacion = rollout(tmp_nodo$tablero, booleano_politica)
backpropagate(tmp_nodo, tmp_puntuacion)}
retorno = tryCatch(get_best_move(actual_node, 0, booleano_politica), error = function(c){
print("Error al realizar el movimiento, intentelo denuevo")
return(actual_node)})
return(retorno)
}
#Selecionar el nodo más prometedor
select = function(nodo, constante, booleano_politica = TRUE){
#Asegurarse de que estamos en un nodo no terminal
while(!(nodo$is_terminal)){
#Si el nodo esta completamente extendido:
if(nodo$is_extended){
nodo = get_best_move(nodo, constante, booleano_politica)}
#Si el nodo NO esta completamente extendido
else{
return(expand(nodo, booleano_politica))}}
return(nodo)
}
tree_policy = function(lista_estados){
#creacion de un vector vacio que guardara los pesos del
#heroe elejido en cada estado
pesos = NULL
#Creacion de variable que tendra el peso total de todos los pesos.
peso_total = 0
#Pasar por cada heroe posible
for (estado_actual in lista_estados){
tmp_peso = data_Keys_Heroes[which(data_Keys_Heroes$primaryname == estado_actual),4]
pesos = append(pesos, tmp_peso)
peso_total = peso_total + tmp_peso}
#elejir un numero aleatorio entre 1 al peso_total
peso_aleatorio = sample(1:(peso_total), 1)
#Crear una variable numerica que almacena la direccion del estado a elegir
direccion = 1
#Ir por cada peso del vector para ver que jugara se elige
for (peso_actual in pesos){
#Si el peso aleatorio es inferior al peso actual
if(peso_aleatorio <= peso_actual){
#Retornar estado en la direccion correspondiente
return(lista_estados[direccion])}
#Disminuir el peso aleatorio por el peso actual
peso_aleatorio = peso_aleatorio - peso_actual
#aumentar la direccion apropiadamente
direccion = direccion + 1}
#No se deberia llegar a esta parte
stop("El peso aleatorio es mayor que el peso total")
}
expand = function(nodo, booleano_politica = TRUE){
#Se construye un vector de posibles heroes a seleccionar
estados = set_movimientos(nodo$tablero)
#Se obtiene la cantidad total de movimientos disponibles en este estado
#Por cada estado se "planea" generar un nodo hijo
while(length(estados) != 0){
#Se selecciona un estado actual dependiendo de si la politica
#esta activada o no
if(booleano_politica){
estado_actual = tree_policy(estados)}
else{
estado_actual = estados[(sample(1:(length(estados)), 1))]}
#Variable booleana que indica si el estado actual esta o no en los hijos del nodo
estado_en_hijos = FALSE
#Se crea un tablero con la seleccion del heroe realizada
tablero_con_estado_actual = realizar_movimiento(nodo$tablero, estado_actual)
#Se confirma que el estado no existe previamente
for(nodo_hijo_actual in nodo$children){
if(identical(tablero_con_estado_actual, nodo_hijo_actual$tablero)){
estado_en_hijos = TRUE}}
#Si el estado no esta en los hijos del nodo
if(!estado_en_hijos){
#Agregar un nodo hijo que tenga el estado
nuevo_nodo = crear_nodo(cont_nodos, tablero_con_estado_actual)
nodo$AddChildNode(nuevo_nodo)
cont_nodos <<- cont_nodos+1
#Si se alcanzaron todos los estados
if(length(nodo$children) == cant_por_Seleccionar){
nodo$is_extended = TRUE}
#Una vez se agrega un nodo hijo, nos retiramos
return(nuevo_nodo)}
#Elimino el estado actual del vector de estados.
estados = estados[which(estados != estado_actual)]}
#Debugging
print("No se deberia de llegar aqui")
}
#Recibe: Una lista de nombres de heroes
#Retorna: un nombre de heroe escogido segun la polotica.
default_policy = function(lista_estados){
#creacion de un vector vacio que guardara los pesos del heroe elejido en cada estado
pesos = NULL
#Creacion de variable que tendra el peso total de todos los pesos.
peso_total = 0
#Pasar por cada heroe posible
for (estado_actual in lista_estados){
tmp_peso = data_Keys_Heroes[which(data_Keys_Heroes$primaryname == estado_actual),4]
pesos = append(pesos, tmp_peso)
peso_total = peso_total + tmp_peso}
#elejir un numero aleatorio entre 1 al peso_total
peso_aleatorio = sample(1:(peso_total), 1)
#Crear una variable numerica que almacena la direccion del estado a elegir
direccion = 1
#Ir por cada peso del vector para ver que jugara se elige
for (peso_actual in pesos){
#Si el peso aleatorio es inferior al peso actual
if(peso_aleatorio <= peso_actual){
#Retornar estado en la direccion correspondiente
return(lista_estados[direccion])}
#Disminuir el peso aleatorio por el peso actual
peso_aleatorio = peso_aleatorio - peso_actual
#aumentar la direccion apropiadamente
direccion = direccion + 1}
#No se deberia llegar a esta parte
stop("El peso aleatorio es mayor que el peso total")
}
#Simula el juego mediante una politica de Rollout hasta llegar a un final de juego
rollout = function(tablero, booleano_politica = TRUE){
#Mientras no se llegue a un final...
while(!is_done(tablero)){
#Intentar conseguir el set de movimientos permitidos
tmp_estados = set_movimientos(tablero)
############realizar un movimiento segun la politica#########
#Se selecciona un tablero dependiendo de si la politica esta activada o no
if(booleano_politica){
#Los heroes con mayor probabilidad de victoria individual
#tienen más probabilidad de ser seleccionados
tablero = realizar_movimiento(tablero, default_policy(tmp_estados))}
else{
#Aleatorio
tablero = realizar_movimiento(tablero, tmp_estados[sample(1:(length(tmp_estados)), 1)])}}
###############Creacion de la instancia a predecir##################
##Genero un vector con los ID de cada heroe seleccionado
#generar vector vacio
tmp_vector_IDs = c()
for(nombre in tablero[[3]]){
tmp_vector_IDs = append(tmp_vector_IDs, which(data_Keys_Heroes[,3] == nombre))}
#Agregar un factor
slq_draft = data.frame(as.factor(0))
for (i in 1:(length(data_partidas)-1)){
#Editar gamemode en instancia nueva
if(i == 1){
#Se establecen los nombres de los niveles para que concuerden con todas las instancias de consuta
levels(slq_draft[,i]) = niveles_gamemode
#darle el valor de gamemode
slq_draft[,i][1] = as.character(tablero[[4]])}
#Editar mapid en instancia nueva
else if(i == 2){
#Agregar un factor
slq_draft = data.frame(slq_draft, as.factor(0))
#Se establecen los nombres de los niveles para que concuerden
#con todas las instancias de consuta
levels(slq_draft[,i]) = niveles_maps
#darle el valor de mapid
slq_draft[,i][1] = as.character(tablero[[5]])}
#Editar heroes en instancia nueva
else{
#Agregar un factor
slq_draft = data.frame(slq_draft, as.factor(0))
#Se establecen los nombres de los niveles para que concuerden con todas las instancias de consuta
levels(slq_draft[,i]) = c("0", "1")
if((i-2) <= cant_Heroes){
if((i-2) == tmp_vector_IDs[1] || (i-2) == tmp_vector_IDs[4] || (i-2) == tmp_vector_IDs[5] || (i-2) == tmp_vector_IDs[8] || (i-2) == tmp_vector_IDs[9]){
#darle el valor que simboliza si estuvo o no seleccionado el personaje
slq_draft[,i][1] = "1"}}
else{
if((i-(cant_Heroes+2)) == tmp_vector_IDs[2] || (i-(cant_Heroes+2)) == tmp_vector_IDs[3] || (i-(cant_Heroes+2)) == tmp_vector_IDs[6] || (i-(cant_Heroes+2)) == tmp_vector_IDs[7] || (i-(cant_Heroes+2)) == tmp_vector_IDs[10]){
#darle el valor que simboliza si estuvo o no seleccionado el personaje
slq_draft[,i][1] = "1"}}}}
slq_draft = setNames(slq_draft, append(append(c("gamemode", "mapid"), data_Keys_Heroes$primaryname), paste(data_Keys_Heroes$primaryname, "_02", sep = "")))
#Prediccion de victoria
puntuacion_victoria = round(predict(Grnd_Modelo_por_mapa[[which(niveles_maps == tablero[[5]])]], slq_draft[,-c(1,2)],n.trees = as.numeric(nombres_error_minimo_por_mapas[[which(niveles_maps == tablero[[5]])]]))-1)
names(puntuacion_victoria) = NULL
if(puntuacion_victoria == 1){
return(1)}
else{
return(-1)}
}
backpropagate = function(nodo, puntuacion){
#Actualizar los nodos hasta la raiz
while(!is.null(nodo)){
#actualizar visita
nodo$visitas = nodo$visitas +1
#actualizar puntuacion
nodo$puntuacion = nodo$puntuacion + puntuacion
#pasar al padre del nodo actual
nodo = nodo$parent}
}
politica_best_move = function(lista_nodos, turno_actual){
#Contruir la lista de los posibles estados.
lista_estados = NULL
for(nodo in lista_nodos){
if(turno_actual == 1 || turno_actual == 2 || turno_actual == 8 || turno_actual == 9){
lista_estados = append(lista_estados, tail(nodo$tablero[[2]], 1))}
else{
lista_estados = append(lista_estados, tail(nodo$tablero[[3]], 1))}}
#creacion de un vector vacio que guardara los pesos del heroe elejido en cada estado
pesos = NULL
#Creacion de variable que tendra el peso total de todos los pesos.
peso_total = 0
#Pasar por cada heroe posible
for (estado_actual in lista_estados){
tmp_peso = data_Keys_Heroes[which(data_Keys_Heroes$primaryname == estado_actual),4]
pesos = append(pesos, tmp_peso)
peso_total = peso_total + tmp_peso}
#elejir un numero aleatorio entre 1 al peso_total
peso_aleatorio = sample(1:(peso_total), 1)
#Crear una variable numerica que almacena la direccion del estado a elegir
direccion = 1
#Ir por cada peso del vector para ver que jugara se elige
for (peso_actual in pesos){
#Si el peso aleatorio es inferior al peso actual
if(peso_aleatorio <= peso_actual){
#Retornar estado en la direccion correspondiente
return(lista_nodos[[direccion]])}
#Disminuir el peso aleatorio por el peso actual
peso_aleatorio = peso_aleatorio - peso_actual
#aumentar la direccion apropiadamente
direccion = direccion + 1}
#No se deberia llegar a esta parte
stop("El peso aleatorio es mayor que el peso total")
}
get_best_move = function(nodo, constante_exploracion, booleano_politica = TRUE){
#definir mejor puntuacion y mejor movimiento
tmp_best_score = -Inf
tmp_best_moves = list()
#recorrer los hijos:
for (nodo_hijo in nodo$children){
#Definir el equipo actualmente jugando
if(nodo$tablero[[1]] == 1 || nodo$tablero[[1]] == 3 || nodo$tablero[[1]] == 6 || nodo$tablero[[1]] == 7 || nodo$tablero[[1]] == 9 || nodo$tablero[[1]] == 12 || nodo$tablero[[1]] == 13){
flag_jugador_actual = 1}
else if(nodo$tablero[[1]] == 2 || nodo$tablero[[1]] == 4 || nodo$tablero[[1]] == 5 || nodo$tablero[[1]] == 8 || nodo$tablero[[1]] == 10 || nodo$tablero[[1]] == 11 || nodo$tablero[[1]] == 14){
flag_jugador_actual = -1}
#Obtener la puntiacion de movimiento usando la formula UCT
tmp_move_score = ((flag_jugador_actual*nodo_hijo$puntuacion)/nodo_hijo$visitas) + (constante_exploracion*(sqrt(log(nodo$visitas)/nodo_hijo$visitas)))
#Si se encuentra un mejor movimiento, cambiar valor tmp_best_score y lista tmp_best_moves
if(tmp_move_score > tmp_best_score){
tmp_best_score = tmp_move_score
tmp_best_moves = list(nodo_hijo)}
else if(tmp_move_score == tmp_best_score){
tmp_best_moves = append(tmp_best_moves, nodo_hijo)}}
if(booleano_politica){
#Se devuelve una de las mejores jugadas segun la politica de best move
return(politica_best_move(tmp_best_moves, nodo$tablero[[1]]))}
else{
#Aca se esta devolviendo una de las mejores jugadas al azar
return(tmp_best_moves[[sample(1:(length(tmp_best_moves)), 1)]])}
}
rm(tmp)
tbl_draft = crear_tablero()
cont_nodos <<- 0
nodo_tmp = crear_nodo("raiz", tbl_draft)
while(!nodo_tmp$is_terminal)
{
nodo_tmp = search(nodo_tmp, 7, TRUE)
}
cant_Heroes = length(data_Keys_Heroes[,3])
tbl_draft = crear_tablero()
cont_nodos <<- 0
nodo_tmp = crear_nodo("raiz", tbl_draft)
while(!nodo_tmp$is_terminal)
{
nodo_tmp = search(nodo_tmp, 7, TRUE)
}
rm(LstGrndModel)
Grnd_Modelo_por_mapa = NULL
for(i in 1:(length(niveles_maps))){
Grnd_Modelo_por_mapa = append(Grnd_Modelo_por_mapa, list(readRDS(paste0("GrndModel", i, ".RDS"))))}
tbl_draft = crear_tablero()
cont_nodos <<- 0
nodo_tmp = crear_nodo("raiz", tbl_draft)
while(!nodo_tmp$is_terminal)
{
nodo_tmp = search(nodo_tmp, 7, TRUE)
}
#Otros
library(gbm)
tbl_draft = crear_tablero()
cont_nodos <<- 0
nodo_tmp = crear_nodo("raiz", tbl_draft)
while(!nodo_tmp$is_terminal)
{
nodo_tmp = search(nodo_tmp, 7, TRUE)
}
cant_por_Seleccionar = 40
cont_nodos <<- 0
niveles_gamemode = readRDS("nvGamemode.RDS")
niveles_maps = readRDS("nvMaps.RDS")
data_Keys_Heroes = readRDS("dataKeysHeroes.RDS")
data_Keys_Maps = readRDS("dataKeysMaps.RDS")
cant_Heroes = length(data_Keys_Heroes[,3])
nombres_error_minimo_por_mapas = readRDS("lstNameMinErroGB.RDS")
tbl_draft = crear_tablero()
cont_nodos <<- 0
nodo_tmp = crear_nodo("raiz", tbl_draft)
while(!nodo_tmp$is_terminal)
{
nodo_tmp = search(nodo_tmp, 7, TRUE)
}
library(shiny)
#library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(dashboardthemes)
library(shinyjs)
#Nodo
library(data.tree)
#Otros
library(gbm)
tbl_draft = crear_tablero()
cont_nodos <<- 0
nodo_tmp = crear_nodo("raiz", tbl_draft)
while(!nodo_tmp$is_terminal)
{
nodo_tmp = search(nodo_tmp, 7, TRUE)
}
nodo_tmp$tablero
library(shiny)
#library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(dashboardthemes)
library(shinyjs)
#Nodo
library(data.tree)
#Otros
library(gbm)
data_partidas = readRDS("dataPartidas.RDS")
shiny::runApp()
shiny::runApp()
print(switch(3, "1", "2", "3", "4"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(data_Keys_Heroes)
shiny::runApp()
library(shiny)
#library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(dashboardthemes)
library(shinyjs)
#Nodo
library(data.tree)
#Otros
library(gbm)
data_Keys_Heroes = readRDS("dataKeysHeroes.RDS")
View(data_Keys_Heroes)
shiny::runApp()
shiny::runApp()
shiny::runApp()
signif(64.2930183479684)
signif(64.2930183479684, digits = 2)
signif(64.2930183479684, digits = 6)
signif(64.2930183479684, digits = 5)
signif(64.2930183479684, digits = 4)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
history()
View(ui)
save.image("D:/Users/javie/Desktop/Prueba_De_Datos/Practica_Web_App/Lo ultimo que quedo de app/Datos.RData")
View(server)
View(ui)
library(shiny); runApp('app2.R')
shiny::runApp()
shiny::runApp()
runApp()
library(shiny)
#library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(dashboardthemes)
library(shinyjs)
#Nodo
library(data.tree)
runApp()
